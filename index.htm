<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sverige Travel Mate - Your Swedish Adventure Guide</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #0a0a0a;
            color: #ffffff;
            overflow-x: hidden;
        }

        /* GPS Tracking Panel */
        .gps-tracking-panel {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 2000;
            background: rgba(0, 0, 0, 0.9);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 20px;
            padding: 20px;
            min-width: 250px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            transition: all 0.3s ease;
        }

        .gps-tracking-panel:hover {
            box-shadow: 0 15px 40px rgba(30, 64, 175, 0.3);
        }

        .gps-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: #60a5fa;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .gps-status {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 10px;
        }

        .gps-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #ff5252;
            animation: pulse 2s infinite;
        }

        .gps-dot.active {
            background: #4CAF50;
        }

        @keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0.7);
            }
            70% {
                box-shadow: 0 0 0 10px rgba(76, 175, 80, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(76, 175, 80, 0);
            }
        }

        .gps-info {
            font-size: 0.9rem;
            color: #b0b0b0;
            line-height: 1.6;
        }

        .gps-coords {
            font-family: monospace;
            color: #2dd4bf;
            margin: 5px 0;
        }

        .gps-speed {
            color: #60a5fa;
            font-weight: 600;
        }

        .gps-city {
            color: #ffffff;
            font-weight: 500;
            margin-top: 10px;
        }

        .gps-auto-scroll {
            margin-top: 15px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .gps-auto-scroll input[type="checkbox"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

        .gps-auto-scroll label {
            cursor: pointer;
            color: #b0b0b0;
        }

        .hero {
            height: 100vh;
            background: 
                linear-gradient(135deg, rgba(30, 64, 175, 0.85) 0%, rgba(45, 212, 191, 0.85) 100%),
                url('/sv/png/sweden.png') center/cover no-repeat;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            overflow: hidden;
        }
        
        .hero::before {
            content: '';
            position: absolute;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 1px, transparent 1px);
            background-size: 50px 50px;
            animation: drift 20s linear infinite;
            z-index: 1;
        }
        
        @keyframes drift {
            0% { transform: translate(0, 0); }
            100% { transform: translate(50px, 50px); }
        }
        
        .hero-content {
            text-align: center;
            z-index: 10;
            animation: fadeInUp 1s ease-out;
        }
        
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .hero h1 {
            font-size: 5rem;
            font-weight: 800;
            margin-bottom: 1rem;
            background: linear-gradient(to right, #ffffff, #e0e0e0);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            letter-spacing: -2px;
        }

        .hero p {
            font-size: 1.5rem;
            opacity: 0.9;
            margin-bottom: 2rem;
        }

        .cta-button {
            display: inline-block;
            padding: 1rem 3rem;
            background: rgba(255, 255, 255, 0.2);
            border: 2px solid rgba(255, 255, 255, 0.5);
            border-radius: 50px;
            color: white;
            text-decoration: none;
            font-weight: 600;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .cta-button:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .section {
            padding: 100px 0;
            position: relative;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        .section-title {
            font-size: 3rem;
            text-align: center;
            margin-bottom: 4rem;
            background: linear-gradient(135deg, #1e40af, #2dd4bf);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .map-section {
            background: #111111;
        }
        
        #map-section {
            scroll-margin-top: 100px;
        }
        
        /* Weather Styles */
        .weather-container {
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 0 20px 60px rgba(30, 64, 175, 0.2);
            margin-bottom: 40px;
        }

        .weather-loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 15px;
            color: #888;
        }

        .weather-content {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 40px;
            align-items: center;
        }

        .weather-main {
            display: flex;
            align-items: center;
            gap: 30px;
        }

        .weather-icon-container {
            position: relative;
        }

        .weather-icon {
            width: 120px;
            height: 120px;
            filter: drop-shadow(0 5px 15px rgba(30, 64, 175, 0.3));
        }

        .weather-temp {
            font-size: 4rem;
            font-weight: 800;
            background: linear-gradient(135deg, #1e40af, #2dd4bf);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            line-height: 1;
        }

        .weather-desc {
            font-size: 1.2rem;
            color: #b0b0b0;
            margin-top: 5px;
        }

        .weather-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 20px;
        }

        .weather-detail {
            background: rgba(255, 255, 255, 0.05);
            padding: 15px;
            border-radius: 15px;
            text-align: center;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .weather-detail:hover {
            background: rgba(30, 64, 175, 0.1);
            transform: translateY(-2px);
        }

        .weather-detail-label {
            font-size: 0.85rem;
            color: #888;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .weather-detail-value {
            font-size: 1.2rem;
            font-weight: 600;
            color: #ffffff;
        }

        .weather-location {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            color: #b0b0b0;
        }

        .weather-location::before {
            content: 'üå§Ô∏è';
            font-size: 1.2rem;
        }

        .weather-update {
            font-size: 0.85rem;
            color: #666;
            margin-top: 20px;
            text-align: center;
        }

        #map {
            width: 100%;
            height: 600px;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 20px 60px rgba(30, 64, 175, 0.2);
            position: relative;
        }

        .location-status {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 1000;
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(10px);
            padding: 15px 25px;
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .location-status.active {
            background: rgba(76, 175, 80, 0.2);
            border-color: #4CAF50;
        }

        .location-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ff5252;
            animation: pulse 2s infinite;
        }

        .location-status.active .location-dot {
            background: #4CAF50;
        }

        .places-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 30px;
            margin-top: 80px;
        }

        .place-card {
            background: linear-gradient(135deg, #1a1a1a, #2a2a2a);
            border-radius: 20px;
            padding: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            min-height: 400px;
            display: flex;
            flex-direction: column;
        }

        .place-card.nearest {
            border: 2px solid #4CAF50;
            box-shadow: 0 0 30px rgba(76, 175, 80, 0.3);
        }

        .place-card-bg {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-size: cover;
            background-position: center;
            opacity: 0.3;
            transition: opacity 0.3s ease, transform 0.3s ease;
            z-index: 0;
        }

        .place-card:hover .place-card-bg {
            opacity: 0.4;
            transform: scale(1.05);
        }

        .place-card-content {
            position: relative;
            z-index: 1;
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .place-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: radial-gradient(circle at var(--mouse-x) var(--mouse-y), rgba(30, 64, 175, 0.15), transparent);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .place-card:hover::before {
            opacity: 1;
        }

        .place-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(30, 64, 175, 0.3);
        }

        .place-card h3 {
            font-size: 1.8rem;
            margin-bottom: 15px;
            color: #ffffff;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.5);
        }

        .place-card h3 a {
            color: inherit;
            text-decoration: none;
            transition: color 0.3s ease;
        }

        .place-card h3 a:hover {
            color: #60a5fa;
        }

        .place-card .category {
            display: inline-block;
            padding: 5px 15px;
            background: rgba(30, 64, 175, 0.3);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            font-size: 0.9rem;
            margin-bottom: 15px;
            color: #60a5fa;
            border: 1px solid rgba(30, 64, 175, 0.4);
            text-transform: capitalize;
        }

        .place-card p {
            color: #d0d0d0;
            line-height: 1.6;
            margin-bottom: 20px;
            flex: 1;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
        }

        .place-card .distance {
            display: flex;
            align-items: center;
            gap: 5px;
            margin: 15px 0;
            color: #4CAF50;
            font-weight: 600;
        }

        .place-card .distance::before {
            content: 'üö∂‚Äç‚ôÇÔ∏è';
            font-size: 1.2rem;
        }

        .place-card .details {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 20px;
        }

        .place-card .time {
            color: #2dd4bf;
            font-weight: 600;
        }

        .place-card .visit-btn {
            padding: 8px 20px;
            background: linear-gradient(135deg, #1e40af, #2dd4bf);
            border: none;
            border-radius: 25px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .place-card .visit-btn:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 20px rgba(30, 64, 175, 0.4);
        }

        .filter-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 50px;
            flex-wrap: wrap;
        }

        .filter-btn {
            padding: 10px 25px;
            background: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 30px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

        .filter-btn:hover {
            background: rgba(30, 64, 175, 0.3);
            border-color: #1e40af;
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #1e40af, #2dd4bf);
            border-color: transparent;
        }

        .sort-container {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
            align-items: center;
        }

        .sort-label {
            color: #888;
            font-weight: 600;
        }

        .sort-btn {
            padding: 8px 20px;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }

        .sort-btn.active {
            background: rgba(76, 175, 80, 0.2);
            border-color: #4CAF50;
            color: #4CAF50;
        }

        .footer {
            text-align: center;
            padding: 50px 0;
            background: #0a0a0a;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .footer p {
            color: #666;
        }

        .loading {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #1e40af;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media (max-width: 768px) {
            .hero h1 {
                font-size: 3rem;
            }
            
            .hero p {
                font-size: 1.2rem;
            }
            
            .section-title {
                font-size: 2rem;
            }
            
            #map {
                height: 400px;
            }

            .location-status {
                top: 10px;
                right: 10px;
                padding: 10px 15px;
                font-size: 0.9rem;
            }

            .weather-content {
                grid-template-columns: 1fr;
                gap: 20px;
            }

            .weather-main {
                justify-content: center;
            }

            .gps-tracking-panel {
                top: 10px;
                left: 10px;
                min-width: 200px;
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <!-- GPS Tracking Panel -->
    <div class="gps-tracking-panel">
        <div class="gps-title">
            <span>üìç</span> Live GPS Tracking
        </div>
        <div class="gps-status">
            <div class="gps-dot" id="gps-dot"></div>
            <span id="gps-status-text">Initializing GPS...</span>
        </div>
        <div class="gps-info">
            <div class="gps-coords" id="gps-coords">Latitude: --<br>Longitude: --</div>
            <div class="gps-speed" id="gps-speed">Speed: -- m/s</div>
            <div class="gps-city" id="gps-city">City: Locating...</div>
        </div>
        <div class="gps-auto-scroll">
            <input type="checkbox" id="auto-scroll" checked>
            <label for="auto-scroll">Auto-scroll to nearest</label>
        </div>
    </div>

    <section class="hero">
        <div class="hero-content">
            <h1>Allemansr√§tten Sverige</h1>
            <p>üá∏üá™ Uppt√§ck Sveriges magiska platser üá∏üá™</p>
            <a href="#map-section" class="cta-button">Start Your Journey</a>
        </div>
    </section>

    <section class="section map-section" id="map-section">
        <div class="container">
            <!-- Weather Section -->
            <div class="weather-container" id="weather-container">
                <div class="weather-loading">
                    <div class="loading"></div>
                    <span>Fetching current weather conditions...</span>
                </div>
            </div>
            
            <div style="position: relative;">
                <div id="map"></div>
                <div class="location-status" id="location-status">
                    <div class="location-dot"></div>
                    <span id="location-text">Locating you...</span>
                </div>
            </div>
            
            <div class="filter-container">
                <button class="filter-btn active" onclick="filterPlaces('all')">All Adventures</button>
                <button class="filter-btn" onclick="filterPlaces('museum')">Museums & Galleries</button>
                <button class="filter-btn" onclick="filterPlaces('park')">Parks & Nature</button>
                <button class="filter-btn" onclick="filterPlaces('shopping')">Shopping Districts</button>
                <button class="filter-btn" onclick="filterPlaces('culture')">Cultural Sites</button>
                <button class="filter-btn" onclick="filterPlaces('entertainment')">Entertainment</button>
                <button class="filter-btn" onclick="filterPlaces('food')">Food & Dining</button>
                <button class="filter-btn" onclick="filterPlaces('hotel')">Hotels & Accommodation</button>
                <button class="filter-btn" onclick="filterPlaces('nature')">Nature & Islands</button>
                <button class="filter-btn" onclick="filterPlaces('historical')">Historical Sites</button>
            </div>

            <div class="sort-container">
                <span class="sort-label">Organize by:</span>
                <button class="sort-btn" id="sort-distance" onclick="sortByDistance()">Closest to You</button>
                <button class="sort-btn" id="sort-name" onclick="sortByName()">Alphabetical</button>
            </div>

            <div class="places-grid" id="places-grid">
                <!-- Place cards will be dynamically inserted here -->
            </div>
        </div>
    </section>

    <footer class="footer">
        <div class="container">
            <p>üåä 2025 Sverige Travel Mate üåä<br>Your Gateway to Swedish Adventures<br>Crafted with Love for Explorers ‚ù§Ô∏è</p>
        </div>
    </footer>

    <script>
        // Global variables
        let places = [];
        let userLocation = null;
        let userMarker = null;
        let currentFilter = 'all';
        let currentSort = null;
        let markers = [];
        let nearestPlaceId = null;
        let autoScrollEnabled = true;

        // Initialize map centered on G√∂teborg
        const map = L.map('map').setView([57.7089, 11.9746], 12);
        
        L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
            attribution: '¬© OpenStreetMap contributors ¬© CARTO',
            subdomains: 'abcd',
            maxZoom: 19
        }).addTo(map);

        // Enhanced GPS tracking from CEVT code
        function showPosition(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const speed = position.coords.speed || 0;
            
            userLocation = {
                lat: latitude,
                lng: longitude,
                speed: speed
            };

            // Update GPS panel
            document.getElementById("gps-coords").innerHTML = `Latitude: ${latitude.toFixed(6)}<br>Longitude: ${longitude.toFixed(6)}`;
            document.getElementById("gps-speed").innerHTML = `Speed: ${(speed * 3.6).toFixed(1)} km/h`;
            
            // Update GPS status
            const gpsDot = document.getElementById("gps-dot");
            const gpsStatus = document.getElementById("gps-status-text");
            gpsDot.classList.add("active");
            gpsStatus.textContent = "GPS Active";

            // Update location status on map
            const statusEl = document.getElementById('location-status');
            const textEl = document.getElementById('location-text');
            statusEl.classList.add('active');
            textEl.textContent = 'Tracking your location';

            // Get city name using OpenStreetMap Nominatim API
            const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${latitude}&lon=${longitude}`;
            
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    const city = data.address.city || data.address.town || data.address.village || 'Unknown location';
                    document.getElementById('gps-city').innerHTML = `City: ${city}`;
                    
                    // Update weather for current location if different city
                    if (city && city !== 'Unknown location') {
                        getWeatherForLocation(city);
                    }
                })
                .catch(error => {
                    console.error('Error getting city:', error);
                    document.getElementById('gps-city').innerHTML = 'City: Error locating';
                });

            // Update user marker on map
            updateUserMarker(latitude, longitude);
            
            // Update distances to all places
            updateDistances();
            
            // Find nearest place and auto-scroll if enabled
            if (autoScrollEnabled) {
                findAndScrollToNearest();
            }
            
            // Re-render place cards to show updated distances
            renderPlaceCards();
        }

        function showError(error) {
            const gpsDot = document.getElementById("gps-dot");
            const gpsStatus = document.getElementById("gps-status-text");
            
            gpsDot.classList.remove("active");
            gpsStatus.textContent = `GPS Error: ${error.message}`;
            
            document.getElementById("gps-coords").innerHTML = "Error: " + error.message;
            document.getElementById("gps-speed").innerHTML = "Speed: N/A";
            document.getElementById("location-text").textContent = 'Location access denied';
        }

        // Continuous location update function
        function startContinuousTracking() {
            if (navigator.geolocation) {
                // Watch position for continuous updates
                navigator.geolocation.watchPosition(showPosition, showError, {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 0
                });
                
                // Also update every second for better tracking
                setInterval(() => {
                    navigator.geolocation.getCurrentPosition(showPosition, showError, {
                        enableHighAccuracy: true,
                        timeout: 5000,
                        maximumAge: 0
                    });
                }, 1000);
            } else {
                document.getElementById("gps-status-text").textContent = "GPS not supported";
            }
        }

        // Update user marker on map
        function updateUserMarker(lat, lng) {
            if (userMarker) {
                userMarker = L.marker([lat, lng], {
                    icon: userIcon
                }).addTo(map);
                
                userMarker.bindPopup('You are here! üåü');
            }
            
            // Center map on user location
            map.setView([lat, lng], map.getZoom());
        }

        // Find nearest place and scroll to it
        function findAndScrollToNearest() {
            if (!userLocation || places.length === 0) return;
            
            let nearestPlace = null;
            let shortestDistance = Infinity;
            
            const processedPlaces = getProcessedPlaces();
            
            processedPlaces.forEach(place => {
                if (place.distance) {
                    const dist = parseFloat(place.distance);
                    if (dist < shortestDistance) {
                        shortestDistance = dist;
                        nearestPlace = place;
                    }
                }
            });
            
            if (nearestPlace && nearestPlace.id !== nearestPlaceId) {
                nearestPlaceId = nearestPlace.id;
                
                // Find the card element and scroll to it
                const cards = document.querySelectorAll('.place-card');
                cards.forEach((card, index) => {
                    const cardTitle = card.querySelector('h3 a').textContent;
                    if (cardTitle === nearestPlace.name) {
                        // Highlight nearest card
                        document.querySelectorAll('.place-card').forEach(c => c.classList.remove('nearest'));
                        card.classList.add('nearest');
                        
                        // Smooth scroll to card
                        card.scrollIntoView({ 
                            behavior: 'smooth', 
                            block: 'center' 
                        });
                    }
                });
            }
        }

        // Weather function for current location
        function getWeatherForLocation(city) {
            const weatherContainer = document.getElementById('weather-container');
            
            fetch(`https://api.weatherapi.com/v1/current.json?key=ad8caecea06c43d1912181938230407&q=${encodeURIComponent(city)}`)
                .then(response => response.json())
                .then(data => {
                    const weather = data.current;
                    const location = data.location;
                    
                    weatherContainer.innerHTML = `
                        <div class="weather-location">${location.name}, ${location.country}</div>
                        <div class="weather-content">
                            <div class="weather-main">
                                <div class="weather-icon-container">
                                    <img src="https:${weather.condition.icon}" alt="${weather.condition.text}" class="weather-icon">
                                </div>
                                <div>
                                    <div class="weather-temp">${Math.round(weather.temp_c)}¬∞C</div>
                                    <div class="weather-desc">${weather.condition.text}</div>
                                </div>
                            </div>
                            <div class="weather-details">
                                <div class="weather-detail">
                                    <div class="weather-detail-label">Feels Like</div>
                                    <div class="weather-detail-value">${Math.round(weather.feelslike_c)}¬∞C</div>
                                </div>
                                <div class="weather-detail">
                                    <div class="weather-detail-label">Humidity</div>
                                    <div class="weather-detail-value">${weather.humidity}%</div>
                                </div>
                                <div class="weather-detail">
                                    <div class="weather-detail-label">Wind Speed</div>
                                    <div class="weather-detail-value">${weather.wind_kph} km/h</div>
                                </div>
                                <div class="weather-detail">
                                    <div class="weather-detail-label">UV Index</div>
                                    <div class="weather-detail-value">${weather.uv}</div>
                                </div>
                            </div>
                        </div>
                        <div class="weather-update">Weather updated: ${weather.last_updated}</div>
                    `;
                })
                .catch(error => {
                    console.error('Error fetching weather:', error);
                });
        }

        // Handle auto-scroll checkbox
        document.getElementById('auto-scroll').addEventListener('change', function(e) {
            autoScrollEnabled = e.target.checked;
            if (autoScrollEnabled) {
                findAndScrollToNearest();
            }
        });
        
        }

        // Load places data from JSON file
        async function loadPlacesData() {
            try {
                const response = await fetch('places.json');
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                places = await response.json();
                console.log('Places data loaded:', places.length, 'places');
                
                // Initialize map and UI after data loads
                addMarkersToMap();
                renderPlaceCards();
                
                // Update distances if user location is available
                if (userLocation) {
                    updateDistances();
                    renderPlaceCards();
                }
            } catch (error) {
                console.error('Error loading places data:', error);
                
                // Fallback: show error message to user
                const grid = document.getElementById('places-grid');
                grid.innerHTML = `
                    <div style="grid-column: 1 / -1; text-align: center; padding: 40px; color: #ff5252;">
                        <h3>Error Loading Places</h3>
                        <p>Could not load places.json file. Please check if the file exists and is properly formatted.</p>
                        <p>Error: ${error.message}</p>
                    </div>
                `;
            }
        }

        // Calculate distance between two points
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371; // Radius of the earth in km
            const dLat = deg2rad(lat2 - lat1);
            const dLon = deg2rad(lon2 - lon1);
            const a = 
                Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
                Math.sin(dLon/2) * Math.sin(dLon/2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            const d = R * c; // Distance in km
            return d;
        }

        function deg2rad(deg) {
            return deg * (Math.PI/180);
        }

        // Update distances for all places
        function updateDistances() {
            if (!userLocation) return;
            
            places.forEach(place => {
                const distance = calculateDistance(
                    userLocation.lat, userLocation.lng,
                    place.lat, place.lng
                );
                place.distance = distance.toFixed(1);
            });
        }

        // Get processed places with current filter
        function getProcessedPlaces() {
            let filteredPlaces = places;
            
            if (currentFilter !== 'all') {
                filteredPlaces = places.filter(place => place.category === currentFilter);
            }
            
            return filteredPlaces;
        }

        // Navigate to place detail page
        function goToPlaceDetail(placeId) {
            window.location.href = `places.html?id=${placeId}`;
        }

        // Render place cards
        function renderPlaceCards() {
            const grid = document.getElementById('places-grid');
            let processedPlaces = getProcessedPlaces();
            
            // Sort places if needed
            if (currentSort === 'distance' && userLocation) {
                processedPlaces.sort((a, b) => {
                    const distA = parseFloat(a.distance) || Infinity;
                    const distB = parseFloat(b.distance) || Infinity;
                    return distA - distB;
                });
            } else if (currentSort === 'name') {
                processedPlaces.sort((a, b) => a.name.localeCompare(b.name));
            }
            
            grid.innerHTML = processedPlaces.map(place => `
                <div class="place-card" data-category="${place.category}" onmousemove="updateMousePosition(event, this)">
                    <div class="place-card-bg" style="background-image: url('${place.image || place.images?.[0] || 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=400'}')"></div>
                    <div class="place-card-content">
                        <div class="category">${place.category}</div>
                        <h3><a href="javascript:void(0)" onclick="goToPlaceDetail(${place.id})">${place.name}</a></h3>
                        <p>${place.description}</p>
                        ${place.distance ? `<div class="distance">${place.distance} km away</div>` : ''}
                        <div class="details">
                            <span class="time">${place.hours || place.opening_hours || 'Hours vary'}</span>
                            <button class="visit-btn" onclick="focusOnPlace(${place.lat}, ${place.lng})">View on Map</button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Update mouse position for card hover effects
        function updateMousePosition(event, card) {
            const rect = card.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            card.style.setProperty('--mouse-x', x + 'px');
            card.style.setProperty('--mouse-y', y + 'px');
        }

        // Focus on place on map
        function focusOnPlace(lat, lng) {
            map.setView([lat, lng], 15);
        }

        // Add markers to map
        function addMarkersToMap() {
            // Clear existing markers
            markers.forEach(marker => map.removeLayer(marker));
            markers = [];
            
            places.forEach(place => {
                const marker = L.marker([place.lat, place.lng]).addTo(map);
                marker.bindPopup(`
                    <div style="text-align: center;">
                        <h3>${place.name}</h3>
                        <p>${place.description}</p>
                        <p><strong>Hours:</strong> ${place.hours || place.opening_hours || 'Hours vary'}</p>
                        ${place.distance ? `<p><strong>Distance:</strong> ${place.distance} km</p>` : ''}
                        <button onclick="goToPlaceDetail(${place.id})" style="background: #1e40af; color: white; border: none; padding: 8px 16px; border-radius: 5px; cursor: pointer; margin: 5px;">View Details</button>
                        ${place.website ? `<br><a href="${place.website}" target="_blank" style="color: #1e40af;">Visit Website</a>` : ''}
                    </div>
                `);
                markers.push(marker);
            });
        }

        // Filter functions
        function filterPlaces(category) {
            currentFilter = category;
            
            // Update active filter button
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            
            renderPlaceCards();
        }

        // Sort functions
        function sortByDistance() {
            currentSort = 'distance';
            document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById('sort-distance').classList.add('active');
            renderPlaceCards();
        }

        function sortByName() {
            currentSort = 'name';
            document.querySelectorAll('.sort-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById('sort-name').classList.add('active');
            renderPlaceCards();
        }

        // Initialize the application
        async function init() {
            // Get weather
            getWeather();
            
            // Start GPS tracking
            startContinuousTracking();
            
            // Load places data from JSON file
            await loadPlacesData();
            
            // Add smooth scrolling for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });
        }

        // Add CSS for radar animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes radar {
                0% {
                    opacity: 1;
                    transform: translate(-50%, -50%) scale(0);
                }
                100% {
                    opacity: 0;
                    transform: translate(-50%, -50%) scale(1);
                }
            }
        `;
        document.head.appendChild(style);

        // Start the application when page loads
        document.addEventListener('DOMContentLoaded', init);
    </script>
</body>
</html>
